import "./chunk-MK3UZCMU.js";
import {
  LitElement,
  css,
  html
} from "./chunk-3H7UEAU6.js";

// node_modules/@haxtheweb/simple-icon/lib/simple-icon-button-lite.js
var SimpleIconButtonBehaviors = function(SuperClass) {
  return class extends SuperClass {
    constructor() {
      super();
      this.ariaLabelledby = "";
      this.controls = "";
      this.disabled = false;
      this.form = "";
      this.label = "";
      this.fieldName = "";
      this.type = "";
      this.value = "";
      this.icon = "";
    }
    static get styles() {
      return [
        ...[super.styles || []],
        css`
          :host([hidden]) {
            display: none;
          }
          :host([icon=""]) simple-icon-lite {
            display: none;
          }
          :host {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            position: relative;
            vertical-align: middle;
            border-radius: var(--simple-icon-button-border-radius, 50%);
            background-color: var(
              --simple-icon-button-background-color,
              transparent
            );
            padding: 0;
            margin: 0;
            color: inherit;
          }
          button {
            color: inherit;
            cursor: pointer;
            opacity: var(--simple-icon-button-opacity, 1);
            border: var(--simple-icon-button-border, 0);
            border-radius: var(--simple-icon-button-border-radius, 50%);
            background-color: var(
              --simple-icon-button-background-color,
              transparent
            );
            padding: var(--simple-icon-button-padding, 0px);
            margin: 0px;
            width: 100%;
            height: 100%;
          }
          button[aria-pressed] {
            opacity: var(--simple-icon-button-toggled-opacity, 1);
            --simple-icon-button-border: var(
              --simple-icon-toggled-button-border
            );
            --simple-icon-color: var(--simple-icon-button-toggled-color);
            --simple-icon-button-background-color: var(
              --simple-icon-button-toggled-background-color
            );
          }
          button:focus,
          button:hover {
            opacity: var(--simple-icon-button-focus-opacity, 0.8);
            --simple-icon-button-border: var(--simple-icon-button-focus-border);
            --simple-icon-color: var(--simple-icon-button-focus-color);
            --simple-icon-button-background-color: var(
              --simple-icon-button-focus-background-color
            );
          }
          button:disabled,
          button[disabled] {
            opacity: var(--simple-icon-button-disabled-opacity, 0.5);
            --simple-icon-button-border: var(
              --simple-icon-button-disabled-border
            );
            --simple-icon-color: var(--simple-icon-button-disabled-color);
            --simple-icon-button-background-color: var(
              --simple-icon-button-disabled-background-color
            );
            cursor: not-allowed;
          }

          simple-icon-lite {
            color: inherit;
            height: calc(
              var(--simple-icon-height, 24px) - 2 *
                var(--simple-icon-button-padding, 0px)
            );
            width: calc(
              var(--simple-icon-width, 24px) - 2 *
                var(--simple-icon-button-padding, 0px)
            );
          }
        `
      ];
    }
    // render function
    render() {
      return html`
        <button
          ?autofocus="${this.autofocus}"
          aria-labelledby="${this.ariaLabelledby}"
          .aria-pressed="${this.toggles || this.toggled ? "true" : this.toggles ? "false" : void 0}"
          controls="${this.controls}"
          part="button"
          ?disabled="${this.disabled}"
          form="${this.form}"
          label="${this.label}"
          aria-label="${this.label}"
          name="${this.fieldName}"
          .type="${this.type}"
          value="${this.value}"
        >
          <simple-icon-lite
            icon="${this.icon}"
            part="icon"
            ?no-colorize="${this.noColorize}"
          ></simple-icon-lite>
          <slot></slot>
        </button>
      `;
    }
    // properties available to the custom element for data binding
    static get properties() {
      return {
        ...super.properties,
        autofocus: {
          type: Boolean
        },
        ariaLabelledby: {
          attribute: "aria-labelledby",
          type: String
        },
        controls: {
          type: String
        },
        disabled: {
          type: Boolean
        },
        fieldName: {
          attribute: "field-name",
          type: String
        },
        form: {
          type: String
        },
        icon: {
          type: String,
          reflect: true
        },
        label: {
          type: String
        },
        type: {
          type: String
        },
        value: {
          type: String,
          reflect: true
        },
        toggles: {
          type: Boolean,
          reflect: true
        },
        toggled: {
          type: Boolean,
          reflect: true
        }
      };
    }
  };
};
var SimpleIconButtonLite = class extends SimpleIconButtonBehaviors(LitElement) {
  /**
   * This is a convention, not the standard
   */
  static get tag() {
    return "simple-icon-button-lite";
  }
  constructor() {
    super();
    this.type = "button";
  }
};
customElements.define(SimpleIconButtonLite.tag, SimpleIconButtonLite);

// node_modules/@haxtheweb/scroll-button/scroll-button.js
var ScrollButton = class extends LitElement {
  constructor() {
    super();
    this.icon = "icons:expand-less";
    this.t = {
      backToTop: "Back to top"
    };
    globalThis.dispatchEvent(
      new CustomEvent("i18n-manager-register-element", {
        detail: {
          context: this,
          namespace: "scroll-button",
          localesPath: new URL("./locales/scroll-button.es.json", import.meta.url).href + "/../",
          updateCallback: "render",
          locales: ["es"]
        }
      })
    );
    this._label = this.t.backToTop;
    this.label = "";
    this.position = "top";
    import("./simple-tooltip-YFF7AOQO.js");
  }
  /**
   * Store the tag name to make it easier to obtain directly.
   * @notice function name must be here for tooling to operate correctly
   */
  static get tag() {
    return "scroll-button";
  }
  //styles function
  static get styles() {
    return [
      css`
        :host {
          display: block;
          --scroll-button-z-index: 99;
          z-index: var(--scroll-button-z-index);
        }

        :host([hidden]) {
          display: none;
        }

        simple-icon-button-lite {
          background-color: var(
            --scroll-button-background-color,
            rgba(0, 0, 0, 0.6)
          );
          color: var(--scroll-button-color, white);
        }

        simple-icon-button-lite:hover,
        simple-icon-button-lite:active,
        simple-icon-button-lite:focus {
          color: var(--scroll-button-background-color, rgba(0, 0, 0, 1));
          background-color: var(--scroll-button-color, white);
        }

        simple-tooltip {
          --simple-tooltip-background: var(
            --scroll-button-tooltip-background-color,
            #000000
          );
          --simple-tooltip-opacity: 1;
          --simple-tooltip-text-color: var(
            --scroll-button-tooltip-color,
            #ffffff
          );
          --simple-tooltip-delay-in: 0;
          --simple-tooltip-border-radius: 0;
        }
      `
    ];
  }
  updated(changedProperties) {
    if (super.updated) {
      super.updated(changedProperties);
    }
    changedProperties.forEach((oldvalue, propName) => {
      if (propName === "t" && this.label === "") {
        this._label = this.t.backToTop;
      }
      if (propName === "label" && this.label !== "") {
        this._label = this.label;
      }
    });
  }
  // render function
  render() {
    return html` <simple-icon-button-lite
        @click="${this.scrollEvent}"
        id="btn"
        icon="${this.icon}"
        label="${this._label}"
      ></simple-icon-button-lite>
      <simple-tooltip for="btn" position="${this.position}" offset="14">
        ${this._label}
      </simple-tooltip>`;
  }
  // properties available to the custom element for data binding
  static get properties() {
    return {
      target: {
        type: Object
      },
      icon: {
        type: String
      },
      label: {
        type: String
      },
      _label: {
        type: String
      },
      position: {
        type: String
      },
      t: {
        type: Object
      }
    };
  }
  /**
   * life cycle, element is afixed to the DOM
   */
  scrollEvent(e) {
    if (this.target) {
      this.target.scrollIntoView({
        behavior: "smooth",
        block: "start",
        inline: "nearest"
      });
    } else {
      globalThis.scrollTo({
        top: 0,
        left: 0,
        behavior: "smooth"
      });
    }
  }
};
customElements.define(ScrollButton.tag, ScrollButton);
export {
  ScrollButton
};
/*! Bundled license information:

@haxtheweb/simple-icon/lib/simple-icon-button-lite.js:
  (**
   * Copyright 2020 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   *)

@haxtheweb/scroll-button/scroll-button.js:
  (**
   * Copyright 2019 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   *)
*/
//# sourceMappingURL=@haxtheweb_scroll-button_scroll-button__js.js.map
